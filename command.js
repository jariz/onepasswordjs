// Generated by CoffeeScript 1.4.0

/**
 * @fileOverview A really basic command line interface to demonstrate the
 * CloudKeychain libarary.
 *
 * @example
 * coffee command --open ./data/sample.keychain
 * coffee command --new ./data
 *
*/


(function() {
  var Keychain, createItem, displayItem, filepath, fs, keychain, listItems, openItem, program, unlock;

  program = require('commander');

  fs = require('fs');

  Keychain = require('./src/keychain');

  keychain = null;

  program.version('0.0.1').option('-o, --open <file>', 'Open keychain file').option('-n, --new <file>', 'New keychain file').option('-d, --debug', 'Debug').parse(process.argv);

  unlock = function(fn) {
    return program.prompt('Password: ', function(password) {
      if (keychain.unlock(password)) {
        return fn();
      } else {
        console.log('Incorrect password...\n');
        return unlock(fn);
      }
    });
  };

  listItems = function() {
    console.log('\n===== ITEMS =====');
    keychain.eachItem(function(item) {
      return console.log("  - " + item.overview.title);
    });
    return console.log('=================\n');
  };

  displayItem = function(item, details) {
    var field, section, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    console.log("Category: ", item.category);
    console.log(JSON.stringify(item.overview, null, 2));
    if (details.sections != null) {
      _ref = details.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        section = _ref[_i];
        console.log("\n=== " + section.title + " ===");
        _ref1 = section.fields;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          field = _ref1[_j];
          console.log("" + field.t + ": " + field.v);
        }
      }
    } else if (details.fields != null) {
      console.log('\n');
      _ref2 = details.fields;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        field = _ref2[_k];
        console.log("" + field.name + ": " + field.value);
      }
    } else if (details.notesPlain != null) {
      console.log("\nNotes: " + details.notesPlain);
    } else {
      console.log(JSON.stringify(details, null, 2));
    }
    return console.log('\n');
  };

  openItem = function() {
    return program.prompt("Search for item: ", function(query) {
      var details, item, results;
      keychain.rescheduleAutoLock();
      if (query === "list") {
        listItems();
        return openItem();
      }
      results = keychain.findItems(query);
      if (results.length > 0) {
        item = results[0];
        details = item.unlock('details');
        displayItem(item, details);
      } else {
        console.log('Nothing found... Hint: Enter `list` to display all');
      }
      return openItem();
    });
  };

  createItem = function(keychain, fn) {
    return program.prompt({
      title: "Item Title: ",
      username: "Item Name: ",
      password: "Item Password: ",
      url: "Item URL: ",
      notes: "Item Notes: "
    }, function(data) {
      var item;
      item = Keychain.createItem(data, keychain.master, keychain.overview);
      return fn(keychain.addItem(item).exportBands());
    });
  };

  if (program.open) {
    filepath = program.open;
    keychain = new Keychain().load(filepath);
    keychain.on('lock', function() {
      console.log('\n Locking the Keychain \n');
      return unlock();
    });
    unlock(function() {
      listItems();
      return openItem();
    });
  } else if (program["new"]) {
    filepath = program["new"];
    program.prompt({
      password: 'Password: ',
      hint: 'Password Hint: '
    }, function(user) {
      keychain = Keychain.create(user.password, user.hint);
      fs.mkdirSync("" + filepath + "/1Password.cloudkeychain");
      fs.mkdirSync("" + filepath + "/1Password.cloudkeychain/default");
      fs.writeFileSync("" + filepath + "/1Password.cloudkeychain/default/profile.js", keychain.exportProfile());
      return createItem(keychain, function(bands) {
        var band, filename, _results;
        _results = [];
        for (filename in bands) {
          band = bands[filename];
          _results.push(fs.writeFileSync("" + filepath + "/1Password.cloudkeychain/default/" + filename, band));
        }
        return _results;
      });
    });
  }

}).call(this);
